shallow_clone: true  # For GitHub abd BitBucket
clone_depth: 100     # For other git providers

# -------------------------------------------------------------------------------------------------------------------
#
#  Image       "Visual Studio 2013"  "Visual Studio 2015"      "Visual Studio 2017" "Visual Studio 2019" "Visual Studio 2022"
#  Visual C++  2008/2010/2012/2013   2008/2010/2012/2013/2015  2015/2017            2019                 2022
#
# -------------------------------------------------------------------------------------------------------------------
#
environment:
  CTEST_OUTPUT_ON_FAILURE: 1
  upload_token:
    secure: 
  matrix:
   - _CC: VS2022
     _ARCH: x86
     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
   - _CC: VS2022
     _ARCH: x64
     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
   - _CC: VS2019
     _ARCH: x86
     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
   - _CC: VS2019
     _ARCH: x64
     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
   - _CC: VS2017
     _ARCH: x86
     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
   - _CC: VS2017
     _ARCH: x64
     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
   - _CC: VS2015
     _ARCH: x86
     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
   - _CC: VS2015
     _ARCH: x64
     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
   - _CC: VS2013
     _ARCH: x86
     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013
   - _CC: VS2013
     _ARCH: x64
     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013
   - _CC: VS2012
     _ARCH: x86
     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013
   - _CC: VS2012
     _ARCH: x64
     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013
   - _CC: VS2010
     _ARCH: x86
     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013
   - _CC: VS2010
     _ARCH: x64
     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013
   - _CC: VS2008
     _ARCH: x86
     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013
   - _CC: VS2008
     _ARCH: x64
     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013

#
# Make sure we always have (a decent) perl
#
install:
  - cmd: if not exist "C:\strawberry" cinst strawberryperl
  - cmd: set PATH=C:\strawberry\perl\bin;C:\strawberry\perl\site\bin;C:\strawberry\c\bin;%PATH%
  - perl -v
#
# Make sure we always have (a decent) CMake
#
  - cmd: cinst cmake
  - cmd: set PATH=C:\Program Files\CMake\bin;%PATH%
  - cmake --version

build:
  verbosity: detailed
  parallel: true

clone_folder: C:\projects\%APPVEYOR_PROJECT_NAME%

# matrix:
#   fast_finish: true # Immediately finish build once one of the jobs fails

init:
  - IF "%_CC%" == "VS2022" IF "%_ARCH%" == "x86" call "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars32.bat"
  - IF "%_CC%" == "VS2022" IF "%_ARCH%" == "x64" call "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat"
  - IF "%_CC%" == "VS2019" IF "%_ARCH%" == "x86" call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars32.bat"
  - IF "%_CC%" == "VS2019" IF "%_ARCH%" == "x64" call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars64.bat"
  - IF "%_CC%" == "VS2017" IF "%_ARCH%" == "x86" call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars32.bat"
  - IF "%_CC%" == "VS2017" IF "%_ARCH%" == "x64" call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars64.bat"
  - IF "%_CC%" == "VS2015" IF "%_ARCH%" == "x86" call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x86
  - IF "%_CC%" == "VS2015" IF "%_ARCH%" == "x64" call "C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd" /x64
  - IF "%_CC%" == "VS2015" IF "%_ARCH%" == "x64" call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x86_amd64
  - IF "%_CC%" == "VS2013" IF "%_ARCH%" == "x86" call "C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\vcvarsall.bat" x86
  - IF "%_CC%" == "VS2013" IF "%_ARCH%" == "x64" call "C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\vcvarsall.bat" x86_amd64
  - IF "%_CC%" == "VS2012" IF "%_ARCH%" == "x86" call "C:\Program Files (x86)\Microsoft Visual Studio 11.0\VC\vcvarsall.bat" x86
  - IF "%_CC%" == "VS2012" IF "%_ARCH%" == "x64" call "C:\Program Files (x86)\Microsoft Visual Studio 11.0\VC\vcvarsall.bat" x86_amd64
  - IF "%_CC%" == "VS2010" IF "%_ARCH%" == "x86" call "C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\bin\vcvars32.bat"
  - IF "%_CC%" == "VS2010" IF "%_ARCH%" == "x64" call "C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd" /x64 /release
  - IF "%_CC%" == "VS2008" IF "%_ARCH%" == "x86" call "C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\vcvarsall.bat" x86
  - IF "%_CC%" == "VS2008" IF "%_ARCH%" == "x64" call "C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\bin\vcvarsx86_amd64.bat"
  - ECHO %PATH%

#
# We build using nmake, that is a multi-config generator, so we specify the build type using CMAKE_BUILD_TYPE
build_script:
  - cmake -S . -B build_folder -DCMAKE_BUILD_TYPE=RelWithDebInfo -G "NMake Makefiles"
  - cmake --build build_folder

after_build:
  - cmake --install build_folder --config RelWithDebInfo --prefix %cd%/install_folder
  - cmake --build build_folder --config RelWithDebInfo --target package
  - cd build_folder
  - for %%a in ("*.exe") do ren "%%~a" "%%~Na-%_CC%%%~Xa"
  - cd ..

test_script:
  - ctest --test-dir build_folder -C RelWithDebInfo

on_failure:
  - ps: if(Test-Path build_folder\CMakeFiles\CMakeOutput.log) { cat build_folder\CMakeFiles\CMakeOutput.log }
  - ps: if(Test-Path build_folder\CMakeFiles\CMakeError.log) { cat build_folder\CMakeFiles\CMakeError.log }

artifacts:
  - path: "build_folder/*-%_CC%.exe"
    name: MyArtifact

deploy:
  provider: GitHub
  auth_token:
    secure: "fEAB3xYZ5qzMzndC986dN2rtp1tEAXP76gpp7qWpzzwVuWDDuWcLUH7fPNzDyVeb"
  artifacts: MyArtifact
  draft: false
  prerelease: false
  tag: $(APPVEYOR_REPO_TAG_NAME)
  on:
    APPVEYOR_REPO_TAG: true
